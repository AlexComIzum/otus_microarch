Добрый вечер.

Домашняя работа.

а) Инструментировал сервис exuser метриками с помощью spring boot и подключением соответствующих dependencies. 
б) Сделал дашборд в Графане, в котором метрики разбиты по API методам. 
   Приложил файл grafana_metrics_model.json - json-дашборд по домашнему заданию.
   Графики в дашборде:
   1) Latency (response time) с квантилями по 0.5, 0.95, 0.99, max - Row дашборда "Latency by HTTP methods". 
      Прикрепил скрин Latency_by_HTTP_method.jpg;
   2) RPS - Row дашборда "RPS by API methods".
      Прикрепил два скрина, т.к. при нагрузочном тестировании возникали большие задержки - график с rate [1m] выглядел обрывчато, поэтому сделал 2 скрина с разными интервалами:
      - RPS_BY_API_METHOD_One_minute.jpg(rate 1 минута);
      - RPS_BY_API_METHOD_four_minutes.jpg(rate 4 минуты);
   3) Error Rate - количество 500ых ответов - Row дашборда "Error Rate".
      Прикрепил скрин Error_Rate_by_API_Method.jpg;
в) Добавил в дашборд графики с метриками в целом по сервису, взятые с nginx-ingress-controller.
   Графики в дашборд:
   1) Latency (response time) с квантилями по 0.5, 0.95, 0.99, max - Row дашборда "Latency and RPS from nginx-ingress-controller"  
      Приложил скрин Latency_nginx_ing_controller.jpg    
   2) RPS - Row дашборда "Latency and RPS from nginx-ingress-controller"
      Прикрепил два скрина, т.к. при нагрузочном тестировании возникали большие задержки - график с rate [1m] выглядел обрывчато, поэтому сделал 2 скрина с разным временем:
       - RPS_nginx_ing_controller.jpg(rate 1 минута);
       - RPS_nginx_ing_controller_four_minutes.jpg(rate 4 минуты);  
   3) Error Rate - количество 500ых ответов - Row дашборда "Error Rate"
      Прикрепил скрин Error_Rate_nginx_ing_controller.jpg
г) Настроил алертинг на панелях в ROWs "Error Rate", "Latency by HTTP method", "Latency and RPS from ngшnx-ingress-controller".
д) Сделал задание со звездочкой - 
   1) Добавил графики с метриками потребление подами приложения памяти и CPU
      Row дашборда "System".
      Прикрепил скрин CPU_Memeory_by_pod.jpg
   2) Установил экспортер postgres-exporter для prometheus. 
      Добавил графики с метриками работы БД:
      Rows дашборда "PostgreSql BD" и "Database Stats".
      Забыл указать unit-ы в шкалах графиков, поэтому приложил два скрина -  второй скрин с unit-ами сделал позже(диапазон времени показа графика увеличил до 1 часа).
      Прикрепил скрины Database.jpg и Database_with_unit.jpg(c unit-ами).
      В домашнем задании это не требовалось, но дополнительно приложил еще скрин System_extend.jpg(ROW дашборда "System extended"). 
      В нем отражаются метрики по системе(Memory, CPU).


В домашнем задании это не требовалось, но решил приложить манифесты и команды развертывания всего окружения для выполнения поставленной задачи.
Ссылка на github с манифестами: https://github.com/AlexComIzum/otus_microarch/tree/master/otus_exercises/eleven/work/charts.
Команды:
   а) установка ingress-nginx
      helm install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx 
   б) установка prometheus
      helm install stack prometheus-community/kube-prometheus-stack -f .\prometheus\prometheus.yaml	
   в) Установка базы данных(команда установки БД из helm, вместе с файлом values.yaml). 
      В папке postgre_value лежит файл values.yaml с переопределенными значениями для БД postgresql:
      helm install psgqlbd bitnami/postgresql -f ./postgre_value/values.yaml
   г) Развертывание job для миграции базы данных(команда применения первоначальных миграций):
      helm install pgjob ./job_chart_db
   д) Развертывание приложения RESTful CRUD по созданию, удалению, просмотру и обновлению пользователей
      helm install exuser ./exuzer_chart_app
   е) Обновление ingress-nginx для отправки метрик в prometheus
      helm upgrade ingress-nginx ingress-nginx/ingress-nginx --set controller.metrics.enabled=true --set controller.metrics.serviceMonitor.enabled=true --set controller.metrics.serviceMonitor.additionalLabels.release="stack"
   ж) Установка экспортера postgres-exporter
      helm install pgexporter prometheus-community/prometheus-postgres-exporter -f .\prometheus_postgres_exporter\secret_postgresql_exporter.yaml -f .\prometheus_postgres_exporter\values.yaml      

      (kubectl port-forward service/stack-grafana  9000:80 - предсотавление доступа к Grafana)