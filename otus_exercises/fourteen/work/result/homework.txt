Добрый день.

1. Описание архитектурного решения и схема взаимодействия сервисов
   Общая схема взаимодействия приложений представлена на схеме - файл shema_common.jpg
   Отдельно описал в виде диаграмм последовательностей основные операции:
   а) процесс регистрации, аутентификации(+ авторизации) пользователя 1 - файл reg_user.jpg, shema_1_1.txt(диаграмма в plantuml)
   б) процесс создания, получения и обновления своего профиля пользователем 1, прошедшего авторизацию - файл userprofile_reg.jpg, shema_1_2.txt(описание в plantuml)
   в) процесс выхода пользователя 1 и попытка получения своего профиля - файл userprofile_no_reg.jpg, shema_1_3.txt(описание в plantuml)
   г) процесс регистрации, аутентификации(+ авторизации) пользователя 2 и попытка получить им профиль другого пользователя(пользователь 1) - файл userprofile_not_own.jpg, shema_2.txt(описание в plantuml)

   При обращении пользователя к сервису userprofile, apigateway делает запрос в сервис identprov на авторизацию по JSESSION, 
   если пользователь авторизован, то возвращается JWT, если нет, то делает запрос в сервис identprov на signin и полученный ответ пересылает пользователю.
   В сервисе userprofile при поступлении запроса валидируется jwt токен, который содержит в себе данные пользователя(формируются при авторизации),
   если они совпадают с некоторыми данными запроса, то операция выполняется, в ином случае отправляется ошибка 401.

   Пароли хранятся в зашифрованном виде - применяется Bcrypt c солью - в spring framework данный алгоритм реализован в BCryptPasswordEncoder.

Ссылка на github с манифестами: https://github.com/AlexComIzum/otus_microarch/tree/master/otus_exercises/fourteen/work/charts
2. Команды установки приложений:
 а) minikube addons enable ingress
 б) kubectl create namespace authprovider
 в) kubectl config set-context --current --namespace=authprovider
 г) Установка базы данных для сервиса identprov (команда установки БД из helm, вместе с файлом values.yaml). 
    В директории postgre_idenprov_value лежит файл values.yaml с переопределенными значениями для БД postgresql:
    helm install bdidenprov bitnami/postgresql -f ./postgre_idenprov_value/values.yaml
 д) Развертывание job для миграции базы данных(команда применения первоначальных миграций):
    helm install jobidenprov ./job_idenprov_db
    Миграция осуществляется в БД bdidenprov. С БД bdidenprov взаимодействует сервис identprov.
 е) Развертывание приложения identprov - identity provider. Назначение сервиса: регистрация, аутентификация, авторизация клиентов.
    Пользователям, прошедших авторизацию возвращается JWT токен.
    helm install identprov ./identproviderjwt
 ж) Установка базы данных для сервиса по созданию, обновлению и получению профилей пользователей(команда установки БД из helm, вместе с файлом values.yaml). 
    В директории postgre_userprofile_value лежит файл values.yaml с переопределенными значениями для БД postgresql.      
    helm install bduserprofile bitnami/postgresql -f ./postgre_userprofile_value/values.yaml
 з) Развертывание job для миграции базы данных(команда применения первоначальных миграций):
    helm install jobuserprofile ./job_userprofile_db
    Миграция осуществляется в БД bduserprofile. С БД bduserprofile взаимодействует сервис userprofile.
 и) Развертывание приложения userprofile. Назначение сервиса: создание, получение, обновление профиля пользователя(своего).
    helm install userprofile ./userprofile. 
    В заголовке(HEADER) запроса должно быть поле JSESSIONID, значение которой должно совпадать со значением этого же поля при
    логине(запрос /login) 

3. Запуск тестов - newman run ./Exercise_Authorization.postman_collection.json
   приложил скриншот/вывод выполнения тестов - файл result_test.jpg
   
   Приложил коллекцию postman c примерами запросов 
    - файл Exercise_Authorization.postman_collection.json
   Опубликовал сами тесты и его результаты в postman:
   Link collection in public workspace - 
   https://www.postman.com/alexizum/workspace/otus-exercise-microservice-alex-izum/collection/30113005-6f75be4b-8c1a-4ab0-9152-29952935cdbb?action=share&creator=30113005
  

   Тесты postman включают следующие запросы:
   а) регистрация пользователя 1;
   б) логин пользователя 1; 
   в) авторизация пользователя 1;
   г) добавление профиля пользователя 1;
   д) получение профиля пользователя 1;
   е) обновление профиля пользователя 1;
   ж) выход пользователя 1;
   з) получения профиля пользователя 1 после выхода; 
   и) регистрация пользователя 2;
   к) логин пользователя 2; 
   л) авторизация пользователя 2; 
   м) получение профиля пользователя 1 пользователем 2;

   В тестах использовал следующее:
   а) глобальные переменные(globals), так и коллекцию переменных(collectionVariables).
   б) применение абревиатуры {{baseUrl}} для урла
   в) домен arch.homework в качестве initial значения {{baseUrl}}
   г) применение сгенерированных случайно данных в сценарии, как, например, {{$randomPassword}}, {{$randomPhoneNumber}}, {{$randomEmail}} и др.
   д) в скрине(файл result_test.jpg) видны все запросы и результаты ответов на них.


Буду рад получить от вас комментарии по выполненному домашнему заданию.