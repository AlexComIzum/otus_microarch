В работе представлено два сервиса:
а) orderws. Назначение сервиса: создание, обновление и получение заказов.
б) messagews. Назначение сервиса: регистрация сообщений на создание и обновление заказов. Данные хранятся в формате guid-request-response

I) Идемпотентность реализована следующим образом:

а) ПО индентифкатору сообщения. У каждого сообщения по созданию и обновлению заказов есть идентификатор сообщения(guid). Данные сообщения передаются в сервис messagews
   Алгоритм:
  1) в сервис orderws приходит новое сообщение. 
  2) делается запрос по guid в сервис messagews о наличии данного запроса - поступал ли запрос с таким guid ранее.
  3) если запроса с таким guid не был найден в БД, то в сервисе orderws производится операция по созданию или обновлению заказа
     если запрос с таким guid поступал ранее, то возвращается предыдущий ответ на запрос с данным guid.
  4) по окончанию процесса создания или обновления заказа в сервисе messagews сохраняются запрос и ответ c guid.
б) оптимистическая блокировка.
   У каждого заказа есть версия. Она генерится и обновляется при операциях создания, обновления заказа.
   1) при обновлении заказа сравнивается версия в запросе с версией заказа в БД
   2) если версии совпадают, то данные обновляются,
      если не совпадают, то возврщается статус 3043
    

II) Команды:

 а) kubectl create namespace ingress-ns 
 б) helm install nginx ingress-nginx/ingress-nginx --namespace ingress-ns -f ./ingress/nginx-ingress.yaml 
 в) kubectl create namespace message-ns
 г) Установка базы данных для сервиса message(команда установки БД из helm, вместе с файлом values.yaml). 
    В директории postgre_message_value лежит файл values.yaml с переопределенными значениями для БД postgresql:
    helm install bdmessage bitnami/postgresql -f ./postgre_message_value/values.yaml --namespace message-ns
 д) Развертывание job для миграции базы данных(команда применения первоначальных миграций):
    helm install jobmessage ./job_message_db
    Миграция осуществляется в БД bdmessage. С БД bdmessage взаимодействует сервис messagews.
 е) Развертывание приложения messagews.    
    helm install messagews ./message
 ж) kubectl create namespace order-ns 
 з) Установка базы данных для сервиса по созданию, обновлению и получению заказов(команда установки БД из helm, вместе с файлом values.yaml). 
    В директории postgre_order_value лежит файл values.yaml с переопределенными значениями для БД postgresql.      
    helm install bdorder bitnami/postgresql -f ./postgre_order_value/values.yaml --namespace order-ns
 и) Развертывание job для миграции базы данных(команда применения первоначальных миграций):
    helm install joborder ./job_order_db
    Миграция осуществляется в БД bdorder. С БД bdorder взаимодействует сервис orderws.
 к) Развертывание приложения orderws:
    helm install orderws ./order. 
  
III) Тесты в postman.
   Запросы:
   а) CreateOrder - создание заказа
   б) Get_Order - получение заказа
   в) UpdateOrder - обновление заказа
   г) Get_Order_After_Update - получить объект после обновления.
   д) CreateOrder_Repeat - проверка на идемпотентность через guid сообщения - запрос создания заказа с тем же guid-ом, что и запросе CreateOrder(а),  в ответе получаем тот же номер заказа, что и в запросе а.
   ж) UpdateOrder_Repeat_Unversion - оптимистическая блокировка - запрос на попытку обновить заказ с неактуальной версией заказа, получаем статус 3043, data is out of date
   з) UpdateOrder_Eq_Version - оптимистическая блокировка - запрос на попытку обновить заказ с актуальной версией заказа, получаем ответ 200, order updated
   
 Приложил коллекцию postman c примерами запросов 
    - файл Idempotency.postman_collection.json
   Опубликовал сами тесты и его результаты в postman:
   Link collection in public workspace -    
https://www.postman.com/alexizum/workspace/otus-exercise-microservice-alex-izum/collection/30113005-1ea6ccf4-c43e-4397-b029-46f8d4b0c784?action=share&creator=30113005   

IV) Запуск тестов:
    newman run .\Idempotency.postman_collection.json

    Результаты тестов: result_test.jpg